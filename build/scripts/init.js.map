{"version":3,"sources":["../../server/scripts/init.js"],"names":["mongoose","require","db","mongoURI","connect","useNewUrlParser","useUnifiedTopology","then","console","log","__filename","err","Market","Component","Region","addMarketids","name","marketObjId","objArr","i","market_ids","push","marketsArr","type","description","epic","forEach","e","findOne","market","newMarket","save","componentsArr","component","newComponent","regionArr","keywords","newRegionArr","find","res","_id","done","region","newRegion"],"mappings":"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","sourcesContent":["/****** **** **** **** **** \r\n * Populate the database documents and relationships.\r\n * Market, Component, Region and config settings\r\n*/\r\n\r\nconst mongoose = require('mongoose');\r\n\r\n// DB Config\r\nconst db = require('../config/keys').mongoURI;\r\n\r\n// Connect to Mongo\r\nmongoose\r\n    .connect(db, {useNewUrlParser: true, useUnifiedTopology: true})\r\n    .then(() => console.log(`MongoDB connected for ${__filename}...`))\r\n    .catch(err => console.log(err));\r\n\r\n// Load Models: Market, Component, Region, Keyword\r\nvar Market = require('../models/Market');\r\nvar Component = require('../models/Component');\r\nvar Region = require('../models/Region');\r\n\r\n\r\n// Add market ids to objects that relate to that market. Eg. Add AUDUSD to Australia to describe Australia's influence on the AUDUSD market.\r\nfunction addMarketids( name, marketObjId, objArr ) {\r\n    for (var i in objArr) {\r\n    if (objArr[i].name == name) {\r\n        objArr[i].market_ids.push(marketObjId);\r\n        break; //Stop this loop, we found it!\r\n    }\r\n    }\r\n}\r\n\r\n// Markets: Load up the pre-defined data\r\nvar marketsArr = [\r\n    {name: 'ASX200', type: 'Equities', description: '', epic: 'IX.D.ASX.IFT.IP'},\r\n    {name: 'Dow30', type: 'Equities', description: '', epic: 'IX.D.DOW.IFA.IP'},\r\n    {name: 'S&P500', type: 'Equities', description: '', epic: 'IX.D.SPTRD.IFA.IP'},\r\n    {name: 'Spot Gold', type: 'Commodities', description: '', epic: 'CS.D.CFAGOLD.CFA.IP'},\r\n    {name: 'Brent Oil', type: 'Commodities', description: '', epic: 'CC.D.LCO.UMA.IP'},\r\n    {name: 'Crude Oil', type: 'Commodities', description: '', epic: 'CC.D.CL.UMA.IP'},\r\n    {name: 'EURUSD', type: 'FX', description: '', epic: 'CS.D.EURUSD.MINI.IP'},\r\n    {name: 'GBPUSD', type: 'FX', description: '', epic: 'CS.D.GBPUSD.MINI.IP'},\r\n    {name: 'AUDUSD', type: 'FX', description: '', epic: 'CS.D.AUDUSD.MINI.IP'},\r\n    {name: 'USDJPY', type: 'FX', description: '', epic: 'CS.D.USDJPY.MINI.IP'},\r\n    {name: 'EURJPY', type: 'FX', description: '', epic: 'CS.D.EURJPY.MINI.IP'},\r\n    {name: 'AUDJPY', type: 'FX', description: '', epic: 'CS.D.AUDJPY.MINI.IP'}\r\n];\r\n\r\n// Markets: Loop through array and save to DB.\r\nmarketsArr.forEach(e => {\r\n    Market.findOne({ name: e.name})\r\n        .then(market => {\r\n            if(market) {\r\n                console.log('Market already exists');\r\n            } else {\r\n                let newMarket = new Market({\r\n                    name: e.name,\r\n                    type: e.type,\r\n                    description: e.description\r\n                });\r\n                console.log(`${e.name} saved`);\r\n                newMarket.save();\r\n            }\r\n        });\r\n});\r\n\r\n// Components: Load up the pre-defined data\r\nconst componentsArr = [\r\n    {name: 'Economy', description: ''},\r\n    {name: 'Geopolitics', description: ''},\r\n    {name: 'Left-field Threat', description: ''},\r\n    {name: 'Earnings', description: ''}\r\n];\r\n\r\n\r\n// Components: Loop through array and save to DB.\r\ncomponentsArr.forEach(e => {\r\n    Component.findOne({ name: e.name})\r\n        .then(component => {\r\n            if(component) {\r\n                console.log('Component already exists');\r\n            } else {\r\n                let newComponent = new Component({\r\n                    name: e.name,\r\n                    description: e.description\r\n                });\r\n                console.log(`${e.name} saved`);\r\n                newComponent.save();\r\n            }\r\n        });\r\n});\r\n\r\n\r\n// ------------------------------------\r\n// Region: Load up the pre-defined data\r\nvar regionArr = [\r\n    {name: 'Australia', market_ids: [], keywords: ['RBA','Lowe','Morrison','Australia']},\r\n    {name: 'USA', market_ids: [], keywords: ['Powell','Williams','Clarida','Bowman','Brainard','Quarles','Harker','Mester','Kashkari','Kaplan','Rosengren','George','Bullard','Evans','Strine','Fed Reserve']},\r\n    {name: 'Europe', market_ids: [], keywords: ['Germany','France','Italy','ECB','Lagarde']},\r\n    {name: 'UK', market_ids: [], keywords: ['UK','Boris','Boris Johnson','Sunak ','Raab','Michael Gove']}\r\n];\r\n\r\n// Region: Add market_ids to regionArr. It's all about what Regions influence a Market, not the other way around.\r\nnewRegionArr = Market.find()\r\n    .then(res => {\r\n        res.forEach(market => {\r\n            // ------------\r\n            // Uncomment the console.log's for a visual structure of the Region/Market relationships \r\n            // ------------\r\n\r\n            //console.log(`${market.name} is influenced by the following regions:`);\r\n            switch(market.name) {\r\n                case 'ASX200':\r\n                    //console.log(' Australia');\r\n                    addMarketids('Australia',market._id,regionArr);\r\n                    break;\r\n                case 'AUDUSD':\r\n                    //console.log(' Australia');\r\n                    addMarketids('Australia',market._id,regionArr);\r\n                    break;\r\n                case 'AUDJPY':\r\n                    //console.log(' Australia');\r\n                    addMarketids('Australia',market._id,regionArr);\r\n                    break;\r\n                case 'GBPUSD':\r\n                    //console.log(' UK');\r\n                    addMarketids('UK',market._id,regionArr);\r\n                    break;\r\n            }\r\n            // All markets are influenced by Region = USA, Europe\r\n            //console.log(' Europe');\r\n            addMarketids('Europe',market._id,regionArr);\r\n            //console.log(' USA');\r\n            addMarketids('USA',market._id,regionArr);\r\n            \r\n        });\r\n        \r\n    })\r\n    .then(done => {\r\n        // Regions: The market_ids are stored in the array and it is now ready to save to db\r\n        regionArr.forEach(e => {\r\n            Region.findOne({ name: e.name})\r\n                .then(region => {\r\n                    if(region) {\r\n                        console.log('Region already exists');\r\n                    } else {\r\n                        let newRegion = new Region({\r\n                            name: e.name,\r\n                            market_ids: e.market_ids,\r\n                            keywords: e.keywords\r\n                        });\r\n                        console.log(`${e.name} saved`);\r\n                        newRegion.save();\r\n                    }\r\n                });\r\n        });\r\n        return regionArr;\r\n    })\r\n    .catch(err => console.log(err));\r\n"],"file":"init.js"}