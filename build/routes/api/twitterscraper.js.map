{"version":3,"sources":["../../../server/routes/api/twitterscraper.js"],"names":["express","require","router","Router","axios","cheerio","News","Region","get","req","res","profile","JSON","parse","decodeURIComponent","query","currTime","Date","getTime","interval","keywords","forEach","val","URL","console","log","newNewsItems","then","response","$","load","data","each","index","name","find","text","date","tweet","newNews","type","content","push","length","foundNews","filteredList","filter","value","some","word","includes","final","e","findOne","news","split","save","send","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst axios = require(\"axios\");\r\nconst cheerio = require('cheerio');\r\n\r\n// Load News Model\r\nvar News = require('../../models/Event');\r\nvar Region = require('../../models/Region');\r\n\r\n// Retrieve user accounts to scrape\r\n// Save tweets with keywords in respective Collection\r\n\r\n\r\n\r\n\r\n// @route   GET custom_modules/twitter-scraper\r\n// @desc    Get latest tweets\r\n// @access  Private\r\n// @params  ?profile=[Twitter username]&interval={milliseconds}&keywords=[]\r\nrouter.get('/', (req,res) => {\r\n    var profile = JSON.parse(decodeURIComponent(req.query.profile));\r\n    var currTime = new Date().getTime();\r\n    var interval = currTime- req.query.interval;\r\n    let keywords = JSON.parse(decodeURIComponent(req.query.keywords));\r\n\r\n    profile.forEach(val => {\r\n        var URL = \"https://twitter.com/\" +val;\r\n    \r\n        console.log('Scanning ',URL);\r\n        var newNewsItems = [];\r\n        \r\n        // Collect \r\n        axios.get(URL).then(function(response) {\r\n            let $ = cheerio.load(response.data);  //loading content of HTML body\r\n        \r\n            $('li.stream-item').each(function(index){\r\n                var name = $(this).find('.fullname').text();\r\n                var date = $(this).find('.tweet-timestamp').find('span').data('time') *1000; // Convert seconds to milliseconds\r\n                var tweet = $(this).find('p.tweet-text').text();\r\n        \r\n                var newNews = new News({\r\n                    type: 'News',\r\n                    profile: name,\r\n                    content: tweet,\r\n                    keywords: [],\r\n                    date: date\r\n                });\r\n                \r\n                // Add to array if within interval\r\n                if(date > interval) newNewsItems.push(newNews);\r\n            });\r\n            console.log(\"total: \",newNewsItems.length);\r\n            return newNewsItems;\r\n        })\r\n        .then(foundNews => {\r\n\r\n            let filteredList = [];\r\n            foundNews.filter(value => keywords\r\n                    .some((word) => {\r\n                        if(value.content.includes(word)) {\r\n                            value.keywords.push(word);\r\n                            filteredList.push(value);\r\n                            return true;\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    }\r\n                ));\r\n\r\n            console.log(\"filtered: \",filteredList.length);\r\n            return filteredList;\r\n            })\r\n            .then(final => {\r\n                console.log(\"new: \",final.length);\r\n                final.forEach(e => {\r\n                    News.findOne({ date: e.date})\r\n                        .then(news => {\r\n                            if(news) {\r\n                                console.log('tweet already saved');\r\n                            } else {\r\n                                console.log('saved item');\r\n\r\n                                // Sanitise content (strip hrefs) for ForexLive.\r\n                                // TODO: Custom santisation needs to be dynamic, not hardcoded.\r\n                                if(e.profile == \"ForexLive\" || e.profile == \"CNBC\") e.content = e.content.split(\"http\",1);\r\n                                e.save();\r\n                            }\r\n                        });\r\n                });\r\n            });\r\n        \r\n    });\r\n    res.send(\"Scrape complete\");\r\n});\r\n\r\nmodule.exports = router;"],"file":"twitterscraper.js"}