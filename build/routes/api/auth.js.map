{"version":3,"sources":["../../../server/routes/api/auth.js"],"names":["express","require","router","Router","bcrypt","config","jwt","auth","User","post","req","res","body","email","password","google","status","json","msg","findOne","then","user","compare","isMatch","sign","id","get","expiresIn","err","token","name","complete","welcomemsg","findById","select","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst router = express.Router();\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst config = require(\"config\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst auth = require(\"../../middleware/auth\");\r\n\r\n// Event Model\r\nconst User = require(\"../../models/User\");\r\n\r\n// @route   POST api/auth\r\n// @desc    Authenticate user\r\n// @access  Public\r\nrouter.post(\"/\", (req, res) => {\r\n  const { email, password, google } = req.body;\r\n\r\n  if (!password && !google) {\r\n    return res.status(400).json({ msg: \"Please enter all fields\" });\r\n  } else if (!email) {\r\n    return res.status(400).json({ msg: \"Please enter all fields\" });\r\n  }\r\n\r\n  User.findOne({ email }).then((user) => {\r\n    if (!user) return res.status(400).json({ msg: \"User does not exist\" });\r\n\r\n    // Validate password\r\n    if (password) {\r\n      bcrypt.compare(password, user.password).then((isMatch) => {\r\n        if (!isMatch)\r\n          return res.status(400).json({ msg: \"Invalid credentials\" });\r\n\r\n        jwt.sign(\r\n          { id: user.id },\r\n          config.get(\"jwtSecret\"),\r\n          { expiresIn: 86400 },\r\n          (err, token) => {\r\n            if (err) throw err;\r\n            res.json({\r\n              token,\r\n              user: {\r\n                id: user.id,\r\n                name: user.name,\r\n                email: user.email,\r\n                complete: user.complete,\r\n                welcomemsg: user.welcomemsg,\r\n              },\r\n            });\r\n          }\r\n        );\r\n      });\r\n    } else {\r\n      jwt.sign(\r\n        { id: user.id },\r\n        config.get(\"jwtSecret\"),\r\n        { expiresIn: 86400 },\r\n        (err, token) => {\r\n          if (err) throw err;\r\n          res.json({\r\n            token,\r\n            user: {\r\n              id: user.id,\r\n              name: user.name,\r\n              email: user.email,\r\n              complete: user.complete,\r\n              welcomemsg: user.welcomemsg,\r\n            },\r\n          });\r\n        }\r\n      );\r\n    }\r\n  });\r\n});\r\n\r\n// @route   GET api/auth/user\r\n// @desc    Get user data\r\n// @access  Private\r\nrouter.get(\"/user\", auth, (req, res) => {\r\n  User.findById(req.user.id)\r\n    .select(\"-password\")\r\n    .then((user) => res.json(user));\r\n});\r\n\r\nmodule.exports = router;\r\n"],"file":"auth.js"}