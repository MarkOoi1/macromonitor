{"version":3,"sources":["../../../server/routes/api/users.js"],"names":["express","require","router","Router","bcrypt","config","jwt","User","post","req","res","body","name","email","password","google","status","json","msg","findOne","then","user","newUser","genSalt","err","salt","hash","save","sign","id","get","expiresIn","token","complete","welcomemsg","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst router = express.Router();\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst config = require(\"config\");\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\n// User Model\r\nconst User = require(\"../../models/User\");\r\n\r\n// @route   POST api/user\r\n// @desc    Register new user\r\n// @access  Public\r\nrouter.post(\"/\", (req, res) => {\r\n  const { name, email, password, google } = req.body;\r\n\r\n  if (!password && !google) {\r\n    return res.status(400).json({ msg: \"Please enter all fields\" });\r\n  } else if (!email || !email) {\r\n    return res.status(400).json({ msg: \"Please enter all fields\" });\r\n  }\r\n\r\n  User.findOne({ email }).then((user) => {\r\n    if (user) return res.status(400).json({ msg: \"User already exists\" });\r\n\r\n    const newUser = new User({\r\n      name,\r\n      email,\r\n      password,\r\n    });\r\n\r\n    if (password) {\r\n      // Create salt & hash\r\n      bcrypt.genSalt(10, (err, salt) => {\r\n        bcrypt.hash(newUser.password, salt, (err, hash) => {\r\n          if (err) throw err;\r\n          newUser.password = hash;\r\n          newUser.save().then((user) => {\r\n            jwt.sign(\r\n              { id: user.id },\r\n              config.get(\"jwtSecret\"),\r\n              { expiresIn: 3600 },\r\n              (err, token) => {\r\n                if (err) throw err;\r\n                res.json({\r\n                  token,\r\n                  user: {\r\n                    id: user.id,\r\n                    name: user.name,\r\n                    email: user.email,\r\n                    complete: user.complete,\r\n                    welcomemsg: user.welcomemsg,\r\n                  },\r\n                });\r\n              }\r\n            );\r\n          });\r\n        });\r\n      });\r\n    } else {\r\n      newUser\r\n        .save()\r\n        .then((user) => {\r\n          jwt.sign(\r\n            { id: user.id },\r\n            config.get(\"jwtSecret\"),\r\n            { expiresIn: 3600 },\r\n            (err, token) => {\r\n              if (err) throw err;\r\n              res.json({\r\n                token,\r\n                user: {\r\n                  id: user.id,\r\n                  name: user.name,\r\n                  email: user.email,\r\n                  complete: user.complete,\r\n                  welcomemsg: user.welcomemsg,\r\n                },\r\n              });\r\n            }\r\n          );\r\n        })\r\n        .catch((err) => res.status(400).json({ msg: err }));\r\n    }\r\n  });\r\n});\r\n\r\n// @route   POST api/user/update\r\n// @desc    Update user\r\n// @access  Public\r\n\r\nmodule.exports = router;\r\n"],"file":"users.js"}