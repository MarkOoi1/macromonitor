{"version":3,"sources":["../server/index.js"],"names":["require","config","app","cors","use","express","json","corsOptions","origin","optionsSuccessStatus","PORT","process","env","HOST","startDBServer","db","get","mongoose","connect","useNewUrlParser","useUnifiedTopology","then","res","console","log","__filename","server","ApolloServer","typeDefs","resolvers","applyMiddleware","NODE_ENV","cron","twitter","path","join","__dirname","req","sendfile","listen"],"mappings":"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","sourcesContent":["import \"regenerator-runtime/runtime.js\";\r\nimport express from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport path from \"path\";\r\nimport config from \"config\";\r\n\r\nimport { ApolloServer } from \"apollo-server-express\";\r\nimport { resolvers } from \"./resolvers\";\r\nimport { typeDefs } from \"./typeDefs\";\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nconst app = express();\r\nconst cors = require(\"cors\");\r\n\r\napp.use(express.json());\r\n\r\n// Enable CORS for localhost:3000\r\nvar corsOptions = {\r\n  origin: \"http://localhost:3000\",\r\n  optionsSuccessStatus: 200, // some legacy browsers (IE11, various SmartTVs) choke on 204\r\n};\r\napp.use(cors(corsOptions));\r\n\r\nconst PORT = process.env.PORT || 5000;\r\nconst HOST = process.env.HOST || \"localhost\";\r\n\r\n// DB Config\r\n\r\nconst startDBServer = async () => {\r\n  const db = config.get(\"mongoURI\");\r\n  // Connect to Mongo\r\n  await mongoose.connect(db, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n  });\r\n};\r\n\r\nstartDBServer().then((res) => {\r\n  console.log(`MongoDB connected for ${__filename}...`);\r\n});\r\n\r\n// Use Routes\r\napp.use(\"/api/twitterscraper\", require(\"./routes/api/twitterscraper\"));\r\n\r\n// Routes: for client\r\napp.use(\"/api/region\", require(\"./routes/api/region\"));\r\napp.use(\"/api/markets\", require(\"./routes/api/markets\"));\r\napp.use(\"/api/events\", require(\"./routes/api/events\"));\r\napp.use(\"/api/users\", require(\"./routes/api/users\"));\r\napp.use(\"/api/auth\", require(\"./routes/api/auth\"));\r\napp.use(\"/api/theme\", require(\"./routes/api/theme\"));\r\n\r\n// GraphQL API\r\nconst server = new ApolloServer({\r\n  typeDefs,\r\n  resolvers,\r\n});\r\n\r\nserver.applyMiddleware({ app });\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n  console.log(process.env.NODE_ENV);\r\n\r\n  // Cronjobs\r\n  let cron = require(\"./scripts/cron.js\").twitter(HOST, PORT);\r\n\r\n  // IG Markets price feed\r\n  require(\"./custom_modules/node-ig-api-interface\");\r\n\r\n  app.use(express.static(path.join(__dirname, \"clients/materialui/build\")));\r\n  app.get(\"/\", (req, res) => {\r\n    res.sendfile(\r\n      path.join((__dirname = \"clients/materialui/build/index.html\"))\r\n    );\r\n  });\r\n} else {\r\n  // Static files\r\n  console.log(\"Not in prod.\");\r\n  app.use(\"/\", require(\"./routes/index\"));\r\n  app.use(express.static(\"/public\"));\r\n}\r\n\r\napp.listen(PORT, () => console.log(`Server started on port ${PORT}`));\r\n"],"file":"index.js"}